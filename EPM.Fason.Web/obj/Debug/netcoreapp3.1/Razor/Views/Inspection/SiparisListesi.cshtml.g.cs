#pragma checksum "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "19c0560fa8a049df6ff3e9e0f8f1b017284dc6e2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(EPM_Web.Models.Inspection.Views_Inspection_SiparisListesi), @"mvc.1.0.view", @"/Views/Inspection/SiparisListesi.cshtml")]
namespace EPM_Web.Models.Inspection
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\_ViewImports.cshtml"
using EPM_Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"19c0560fa8a049df6ff3e9e0f8f1b017284dc6e2", @"/Views/Inspection/SiparisListesi.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"63f34ed16a806b7cdcb157e2caccd86ef5edb5c0", @"/Views/_ViewImports.cshtml")]
    public class Views_Inspection_SiparisListesi : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<EPM.Fason.Dto.Fason.INSPECTION_FILTER>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
  
    ViewData["Title"] = "SiparisListesi";
    Layout = "~/Views/Shared/_LayoutInspection.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("<div id=\"form-container\">\r\n    <div class=\"dx-card wide-card\">\r\n        ");
#nullable restore
#line 9 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
    Write(Html.DevExtreme().Form<EPM.Fason.Dto.Fason.INSPECTION_FILTER>()
        .ID("edOnayliListe").ShowValidationSummary(true)
        .ColCount(Mode.Auto)
        .MinColWidth(150)
        .Items(items =>
        {
            items.AddSimpleFor(m => m.FIRMA_ID).Editor(ob => ob.Lookup().DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Inspection").LoadAction("GetFasonUsers").Key("ID")).DisplayExpr("NAME").ValueExpr("ID")).IsRequired(false);
            items.AddSimpleFor(m => m.SEASON).Editor(ob => ob.Lookup().DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Inspection").LoadAction("GetSeasonList").Key("ADI")).DisplayExpr("ADI").ValueExpr("ADI")).IsRequired(false);
            items.AddSimpleFor(m => m.MODEL).Editor(ob=>ob.TextBox().ID("edModel")).IsRequired(false);
            items.AddSimpleFor(m => m.COLOR).Editor(ob=>ob.TextBox().ID("edColor")).IsRequired(false);
            items.AddEmpty();
            items.AddButton().HorizontalAlignment(HorizontalAlignment.Right).VerticalAlignment(VerticalAlignment.Center)
                   .ButtonOptions(b => b.Text("FİLTRELE")
                       .Type(ButtonType.Default)
                       .Icon("fas fa-sign-in-alt")
                       .Width("100%")
                       .OnClick("FasonSiparisFiltrele")
                       .UseSubmitBehavior(true)
               );

        })
        .FormData(Model).ShowValidationSummary(false)
    );

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
        <div id=""popup""></div>
        <div id=""popupDetay""></div>
        <div id=""edListe"" style=""display:inline-block;float:left; width:70%""> </div>
        <div id=""edListeDetail"" style=""display: inline-block; float: right; width: 29%""> </div>
        <div id=""edListeProcess""></div>
    </div>
</div>
<script>
     function FasonSiparisFiltrele() {
        $(""#edListe"").html("""");
        var data = {
            BASLANGIC_TARIHI: jQuery(""[name=BASLANGIC_TARIHI]"").val(),
            BITIS_TARIHI: jQuery(""[name=BITIS_TARIHI]"").val(),
            MODEL: jQuery(""[name=MODEL]"").val(),
            COLOR: jQuery(""[name=COLOR]"").val(),
            SEASON: jQuery(""[name=SEASON]"").val(),
            FIRMA_ID: jQuery(""[name=FIRMA_ID]"").val(),
        }; 
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 52 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
             Write(Url.Action("_PartialSiparisListesi", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            data: data,
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                $(""#edListe"").html(income);

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }

    function gridFocusedRowChanged(e) {
        var data = {
            ENTEGRATION_HEADER_ID: e.row.data.ENTEGRATION_ID
        };
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 75 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
             Write(Url.Action("_PartialSiparisListesiDetail", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            data: data,
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                $(""#edListeDetail"").html(income);

            }, beforeSend: function () {
            }


        }).always(function () {
        });
        SiparisIslemleri(e.row.data.ENTEGRATION_ID);

    }
    function SiparisIslemleri(ENTEGRATION_ID) {
        var data = {
            ENTEGRATION_HEADER_ID: ENTEGRATION_ID
        };
        $.ajax({
            type: ""POST"",
            url: '");
#nullable restore
#line 97 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
             Write(Url.Action("_PartialSiparisIslemler", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            data: data,
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                $(""#edListeProcess"").html(income);

            }, beforeSend: function () {
            }


        }).always(function () {
        });
    }
    var formData = null;
    function AQLYAP(ENTEGRATION_ID,TYPE) {
        var title = ""AQL"";
        if (TYPE == 1)
            title = ""AQL ÜRETİM"";
        else
            title = ""AQL ÇORLU"";
        var popupOptions = {
            contentTemplate: function () {

                return ""<div  style='width:65%;display:inline-block;float:left'><div id='gridForm'></div><div id='values1' ><div id='aqlStandart' class='gauge-manuel' style='float:left;text-align: right;color:green'></div><div id='aqlValidation' class='gauge-manuel' style='float:right;text-align: left;color:indianred'></div><div id='formInformation'>....</div></div></div><div id='gridNumb");
            WriteLiteral(@"ers' style='width:35%;display:inline-block;float:right'></div ><div style='clear:both'><div  id='gridAQL'></div></div><div id='saveButton' style='margin-top:10px'></div>"";
            },
            width: function () { return ""1210px""; },
            height: function () { return ""100vh""; },
            showTitle: true,
            title: title,
            dragEnabled: true,
            closeOnOutsideClick: true,
            onShown: function () {
                var data = {
                    ENTEGRATION_HEADER_ID: ENTEGRATION_ID,
                    TYPE: TYPE
                };
                var resText = $.ajax({
                    type: ""POST"",
                    url: '");
#nullable restore
#line 136 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
                     Write(Url.Action("CreateAQL", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
                    data: data,
                    async: false,
                    contentType: 'application/x-www-form-urlencoded',
                    timeout: 180000,
                    success: function (income, status, xmlRequest) {
                    }, beforeSend: function () {
                    }
                }).responseText;
                formData = JSON.parse(resText);
                CalculateFormStatus();
                var _totalItems = [];
                var columnsIn = formData.Item2[0];
                for (var key in columnsIn) {
                    if (key.startsWith(""MN"") || key.startsWith(""MJ"")) {
                        _totalItems.push({
                            column: key,
                            summaryType: ""sum"",
                            displayFormat: ""{0}""
                        });
                    }
                }
                $(""#gridNumbers"").dxDataGrid({
                    dataSource: formData.Item3,
              ");
            WriteLiteral(@"      keyExpr: ""ID"", scrolling: {
                        mode: ""virtual""
                    }, sorting: {
                        mode: ""none""
                    },
                    columnAutoWidth: true,
                    showBorders: true, focusedRowEnabled: true,
                    focusedRowIndex: 0,
                    focusedColumnIndex: 0,
                    showColumnLines: true,
                    showRowLines: true,
                    height: ""300px"",
                    loadPanel: {
                        enabled: true
                    },
                    editing: {
                        mode: ""cell"",
                        allowUpdating: true
                    }, onRowUpdating: function (e) {
                        var package = {
                            new: null, old: null
                        };
                        package.newValue = e.newData;
                        package.oldValue = e.oldData;
                        var d = $.Defe");
            WriteLiteral("rred();\r\n                        var settings = {\r\n                            \"async\": false,\r\n                            \"url\": \"");
#nullable restore
#line 187 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
                               Write(Url.Action("UpdateNumbers", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            ""method"": ""POST"",
                            ""timeout"": 0,
                            ""headers"": {
                                ""Content-Type"": ""application/json""
                            },
                            ""data"": JSON.stringify(package),
                        };
                        $.ajax(settings).done(function (response) {
                            try {
                                var parsedIncome = response;
                                if (parsedIncome.isOK) {
                                    d.resolve();
                                } else {
                                    d.reject(parsedIncome.errorText);
                                }
                            } catch (e) {
                                d.reject(""İşlem hatası :"" + e.message);
                            }

                        }).fail(function (jqXHR, textStatus) {
                            d.reject(""Kayıt Hatası : "" + textSt");
            WriteLiteral(@"atus);
                        });
                        e.cancel = d.promise();
                    }, summary: {
                        totalItems: [{
                            column: ""QUANTITY"",
                            summaryType: ""sum"",
                            displayFormat: ""{0}""
                        }, {
                            column: ""QUANTITY_RELEASE"",
                            summaryType: ""sum"",
                            displayFormat: ""{0}""
                        }, {
                            column: ""QUANTITY_SAMPLE"",
                            summaryType: ""sum"",
                            displayFormat: ""{0}""
                        }]
                    }, onRowUpdated: function (e) {
                        CalculateFormStatus();
                    },
                    onCellPrepared: function (e) {
                        if (e.rowType == ""header"") {
                            e.cellElement.css(""text-align"", ""center"");
             ");
            WriteLiteral(@"           }
                    },
                    customizeColumns: function (columns) {

                        try {
                            for (var i = 0; i < columns.length; i++) {
                                if (columns[i].dataField == ""ID"")
                                    columns[i].visible = false;
                                if (columns[i].dataField == ""PRODUCT_SIZE"")
                                    columns[i].allowEditing = false;
                                if (columns[i].dataField == ""QUANTITY"")
                                    columns[i].allowEditing = false;
                                if (columns[i].dataField == ""QUANTITY_SAMPLE"")
                                    columns[i].allowEditing = false;
                                if (columns[i].dataField == ""HEADER_ID"")
                                    columns[i].visible = false;

                            }
                        } catch (e) {
                        }


       ");
            WriteLiteral(@"             }
                });
                $(""#gridAQL"").dxDataGrid({
                    dataSource: formData.Item2,
                    keyExpr: ""QUESTION_ID"", scrolling: {
                        mode: ""virtual""
                    }, sorting: {
                        mode: ""none""
                    },
                    columnAutoWidth: true,
                    showBorders: true, focusedRowEnabled: true,
                    focusedRowIndex: 0,
                    focusedColumnIndex: 0,
                    showColumnLines: true,
                    showRowLines: true,
                    height: ""500px"",
                    width: ""100%"",
                    loadPanel: {
                        enabled: true
                    },
                    editing: {
                        mode: ""cell"",
                        allowUpdating: true
                    },
                    onEditingStart: function (e) {
                        if (QuantityRelease == 0) {
   ");
            WriteLiteral(@"                         DevExpress.ui.notify(""Lütfen Gerçekleşen Adetleri Giriniz"");
                            e.cancel = true;
                        }
                    }, onRowUpdating: function (e) {

                        var package = {
                            new: null, old: null
                        };
                        package.newValue = e.newData;
                        package.oldValue = e.oldData;
                        var d = $.Deferred();
                        var settings = {
                            ""async"": false,
                            ""url"": """);
#nullable restore
#line 292 "E:\Eren\Eren Production Management\EPM.Fason.Web\Views\Inspection\SiparisListesi.cshtml"
                               Write(Url.Action("UpdateAQL", "Inspection"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@""",
                            ""method"": ""POST"",
                            ""timeout"": 0,
                            ""headers"": {
                                ""Content-Type"": ""application/json""
                            },
                            ""data"": JSON.stringify(package),
                        };
                        $.ajax(settings).done(function (response) {
                            try {
                                var parsedIncome = response;
                                if (parsedIncome.isOK) {
                                    d.resolve();
                                } else {
                                    d.reject(parsedIncome.errorText);
                                }
                            } catch (e) {
                                d.reject(""İşlem hatası :"" + e.message);
                            }

                        }).fail(function (jqXHR, textStatus) {
                            d.reject(""Kayıt Hatası : "" + textSt");
            WriteLiteral(@"atus);
                        });
                        e.cancel = d.promise();
                    }
                    , summary: {
                        totalItems: _totalItems
                    },
                    onRowUpdated: function (e) {
                        CalculateFormStatus();
                    },
                    onCellPrepared: function (e) {
                        if (e.rowType == ""header"") {
                            e.cellElement.css(""text-align"", ""center"");
                        }
                    },
                    customizeColumns: function (columns) {
                        try {
                            for (var i = 0; i < columns.length; i++) {
                                if (!columns[i].isBand) {
                                    if (columns[i].dataField.startsWith('MJ_')) {

                                        columns.push({
                                            caption: columns[i].dataField.replace('MJ_', ''),");
            WriteLiteral(@"
                                            isBand: true
                                        });
                                        for (var a = 0; a < columns.length; a++) {
                                            if (columns[a].dataField == 'MN_' + columns[i].dataField.replace('MJ_', '')) {
                                                columns[a].ownerBand = columns.length - 1;
                                                columns[a].caption = ""MINOR"";
                                            }
                                        }
                                        columns[i].ownerBand = columns.length - 1;
                                        columns[i].caption = ""MAJOR"";
                                    }
                                    if (columns[i].dataField == ""QUESTION_ID"")
                                        columns[i].visible = false;
                                    if (columns[i].dataField == ""QUESTION"")
                               ");
            WriteLiteral(@"         columns[i].allowEditing = false;
                                    if (columns[i].dataField == ""HEADER_ID"")
                                        columns[i].visible = false;
                                }

                            }
                        } catch (e) {
                        }


                    }
                });
                $(""#gridForm"").dxForm({
                    colCount: 4,
                    formData: formData.Item1,
                    items: [{
                        dataField: ""START_DATE"",
                        caption: ""TARİH"",
                        editorType: ""dxDateBox"",
                        editorOptions: {
                            disabled: true
                        }

                    },
                    {
                        dataField: ""DESCRIPTION"",
                        colSpan: 2,
                        editorType: ""dxTextArea"",
                        caption: ""DESCRIPTION""
       ");
            WriteLiteral(@"             },
                    {
                        dataField: ""CHECKED_INLINE"",
                        editorType: ""dxCheckBox"",
                        editorOptions: {
                            text: ""INLINE TEST NOTLARINI KONTROL ETTİM"",
                        }, label: {
                            text: "" ""
                        }
                    }, {
                        dataField: ""PRODUCTION_HEADER.SEASON"",
                        label: {
                            text: ""SEASON""
                        },
                        editorOptions: {
                            disabled: true
                        }
                    }, {
                        dataField: ""PRODUCTION_HEADER.MODEL"", label: {
                            text: ""MODEL""
                        },
                        editorOptions: {
                            disabled: true
                        }
                    }, {
                        dataField: ""PRODUCT");
            WriteLiteral(@"ION_HEADER.COLOR""
                        , label: {
                            text: ""COLOR""
                        },
                        editorOptions: {
                            disabled: true
                        }
                    }, {
                        dataField: ""FIRMA_ADI"", label: {
                            text: ""FIRMA""
                        },
                        editorOptions: {
                            disabled: true
                        }
                    }]
                });
                $(""#saveButton"").dxButton({
                    stylingMode: ""contained"",
                    text: ""KAYDET"",
                    type: ""success"",
                    width: ""100%"",
                    onClick: function () {
                    }
                });

            }

        };

        $(""#popupDetay"").dxPopup(popupOptions).dxPopup(""instance"").show();


    }
    var QuantitySample = 0;
    var Quantity = 0;
    var Q");
            WriteLiteral(@"uantityRelease = 0;
    var majorCount = 0;
    var minorCount = 0;
    var columnsMinor = [];
    var columnsMajor = [];
    function CalculateFormStatus() {
        QuantitySample = 0;
        Quantity = 0;
        QuantityRelease = 0;
        majorCount = 0;
        minorCount = 0;
        columnsMinor = [];
        columnsMajor = [];
        for (var i = 0; i < formData.Item3.length; i++) {
            QuantitySample += formData.Item3[i].QUANTITY_SAMPLE;
            Quantity += formData.Item3[i].QUANTITY;
            QuantityRelease += formData.Item3[i].QUANTITY_RELEASE;
        }
        var columnsIn = formData.Item2[0];
        for (var key in columnsIn) {
            if (key.startsWith(""MN"")) {
                columnsMinor.push(key);
            }
            if (key.startsWith(""MJ"")) {
                columnsMajor.push(key);
            }
        }
        for (var i = 0; i < formData.Item2.length; i++) {
            for (var a = 0; a < columnsMajor.length; a++) {
       ");
            WriteLiteral(@"         majorCount += formData.Item2[i][columnsMajor[a]];
            }
            for (var a = 0; a < columnsMinor.length; a++) {
                minorCount += formData.Item2[i][columnsMinor[a]];
            }
        }
        $(""#aqlStandart"").html(formData.Item4.ACCEPT_QUANTITY);
        $(""#aqlValidation"").html(minorCount / 2 + majorCount);
        if (QuantityRelease > 0) {
            if (formData.Item4.ACCEPT_QUANTITY > minorCount / 2 + majorCount) {
                $(""#formInformation"").html(""ONAYLANDI"");
                $(""#formInformation"").css(""color"", ""green"");
                $(""#aqlValidation"").css(""color"", ""green"");
            } else {
                $(""#formInformation"").html(""BAŞARISIZ"");
                $(""#formInformation"").css(""color"", ""indianred"");
                $(""#aqlValidation"").css(""color"",""indianred"");
            }
        } else {
            $(""#formInformation"").html(""RELEASE ADETLERİ GİRİNİZ"");
            $(""#formInformation"").css(""color"", ""indianred""");
            WriteLiteral(");\r\n            $(\"#aqlValidation\").css(\"color\", \"indianred\");\r\n        }\r\n        \r\n    }\r\n</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<EPM.Fason.Dto.Fason.INSPECTION_FILTER> Html { get; private set; }
    }
}
#pragma warning restore 1591
