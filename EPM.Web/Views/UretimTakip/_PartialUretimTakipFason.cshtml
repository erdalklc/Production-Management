
@model Tuple<PRODUCTION_HEADER, List<PRODUCTION_PROCESS>, List<PRODUCTION_FASON_USERS>>


@{
}
@using EPM.Core.FormModels.FasonTakip;
 
<div id="form-container">
    <div id="formContainer"></div>
     
    <div class="dx-card wide-card" style="width:49%;min-height:400px;display:inline-block;float:left">
        <div class="dx-field" style="background-color:#03a9f4;margin:5px;padding:10px;color:white">
            <div class="dx-field-label" style="color:white" >SÜREÇ LİSTESİ</div>
        </div>
        <div id="plannedList" style="margin:5px"></div>
    </div>
    <div class="dx-card wide-card" style="width: 49%;min-height:400px;display: inline-block; float: right">
        <div class="dx-field" style="background-color:#03a9f4;margin:5px; padding:10px;color:white">
            <div class="dx-field-label " style="color:white" >SÜREÇ AŞAMALARI</div>
        </div>
        <div id="doingList" style="margin:5px"></div>
    </div>
</div>


<script>

    $(function () {
        $("#formContainer").dxForm({ 
            labelLocation: "top", // or "left" | "right"
            colCount:6,
            items: [{
                dataField: "firmaBilgi",
                editorType: "dxSelectBox", 
                editorOptions: {
                    items: @Html.Raw(Json.Serialize(Model.Item3)),
                    value: 0, valueExpr: "ID",
                    displayExpr: "NAME",
                }
            }]
        });
    }); 
    var tasks = @Html.Raw(Json.Serialize(Model.Item2));
    var listPlanned = $("#plannedList").dxList({
        items: tasks, selectionMode: "none",
        height: 400,
        repaintChangesOnly: true, focusStateEnabled: false,
        keyExpr: "ID",
        itemTemplate: function (data, index) {
            return $("<div>")
                .append($("<div style='display:inline-block;width:49%'>").text(data.NAME))
                .append($("<div style='display:inline-block;width:49%' id='idText" + data.ID + "' data-value='" + data.TIME + "' data-sirano='" + data.ID + "' >")); 
        },
        itemDragging: {
            allowReordering: true,
            group: "tasks",
            onDragStart: function (e) {
                e.itemData = tasks[e.fromIndex];
            },
            onAdd: function (e) {
                tasks.splice(e.toIndex, 0, e.itemData);
                listPlanned.option("items", tasks);
            },
            onRemove: function (e) {
                tasks.splice(e.fromIndex, 1);
                listPlanned.option("items", tasks);
            }
        }, onContentReady: function () {
            for (var i = 0; i < tasks.length; i++) {
                $("#idText" + tasks[i].ID + "").dxTextBox({
                    value: tasks[i].TIME,
                    onValueChanged: function (data) {
                        for (var a = 0; a < tasks.length; a++) {
                            if (tasks[a].ID == parseFloat(data.element[0].id.replace("idText", ""))) {
                                tasks[a].TIME = data.value;
                            }
                        }
                    }
                });
            }

        }
    }).dxList("instance");

    var others = [];
    var listOthers = $("#doingList").dxList({
        items: others, selectionMode: "none",
        repaintChangesOnly: true, height: 400,
        keyExpr: "ID",
        itemTemplate: function (data, index) {
            return $("<div>")
                .append($("<div style='display:inline-block;width:49%'>").text(data.NAME))
                .append($("<div style='display:inline-block;width:49%' id='idSecondText" + data.ID + "' data-value='" + data.TIME + "' data-sirano='" + data.ID + "' >"));
        },
        itemDragging: {
            allowReordering: true,
            group: "tasks",
            onDragStart: function (e) {
                e.itemData = others[e.fromIndex];
            },
            onAdd: function (e) {
                others.splice(e.toIndex, 0, e.itemData);
                listOthers.option("items", others);
            },
            onRemove: function (e) {
                others.splice(e.fromIndex, 1);
                listOthers.option("items", others);
            }
        }, onContentReady: function () {
            for (var i = 0; i < others.length; i++) {
                $("#idSecondText" + others[i].ID + "").dxTextBox({
                    value: others[i].TIME,
                    onValueChanged: function (data) {
                        for (var a = 0; a < others.length; a++) {
                            if (others[a].ID == parseFloat(data.element[0].id.replace("idSecondText", ""))) {
                                others[a].TIME = data.value;
                            }
                        }
                    }
                });
            } 
        }
    }).dxList("instance");
    function inputChange(array, index, val) {
        if (array == 0) {
            tasks[index].TIME = val;
        } else {
            others[index].TIME = val;
        }
    }
    $(document).ready(function () {
    });
</script>
