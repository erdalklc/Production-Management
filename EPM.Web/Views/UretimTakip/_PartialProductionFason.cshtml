
@using EPM.Fason.Dto.Fason;
@model Tuple<PRODUCTION_HEADER, List<PRODUCTION_PROCESS>, List<PRODUCTION_FASON_USERS>>


@{
    var quantity = Model.Item1.DETAIL.Sum(ob => ob.QUANTITY);
    var dateval = Model.Item1.DEADLINE.ToString("dd.MM.yyyy");
}
<div id="form-container">


    <h6 style="margin:10px 0">@Model.Item1.SEASON @Model.Item1.MODEL.@Model.Item1.COLOR @quantity ADETLİK SİPARİŞ İÇİN BİLGİLERİ GİRİNİZ </h6>

    <div id="formContainer">

    </div>
    <div class="dx-card wide-card" style="width:49%;min-height:400px;display:inline-block;float:left">
        <div class="dx-field" style="background-color:#03a9f4;margin:5px;padding:10px;color:white">
            <div class="dx-field-label" style="color:white">SÜREÇ LİSTESİ</div>
        </div>
        <div id="plannedList" style="margin:5px"></div>
    </div>
    <div class="dx-card wide-card" style="width: 49%;min-height:400px;display: inline-block; float: right">
        <div class="dx-field" style="background-color:#03a9f4;margin:5px; padding:10px;color:white">
            <div class="dx-field-label " style="color:white">SÜREÇ AŞAMALARI</div>
        </div>
        <div id="doingList" style="margin:5px"></div>
    </div>

</div>


<script>

    $(function () {

        $("#formContainer").dxForm({
            labelLocation: "top", // or "left" | "right"
            colCount: 6,
            items: [{
                editorType: "dxSelectBox",
                name: "firmaBilgi",
                label: {
                    text: "FİRMA"
                },
                editorOptions: {
                    items: @Html.Raw(Json.Serialize(Model.Item3)),
                    value: 0, valueExpr: "ID",
                    icon: "link",
                    displayExpr: "NAME",
                }
            }, {
                editorType: "dxDateBox",
                name: "terminTarihi",
                label: {
                    text: "TERMİN TARİHİ"
                }, editorOptions: {
                    min: new Date(),
                    displayFormat: "yyyy.MM.dd",
                    value: new Date(@Model.Item1.DEADLINE.Year+"," +@Model.Item1.DEADLINE.Month+"," +@Model.Item1.DEADLINE.Day)
                }
            }, {
                itemType: "empty"
            }, {
                itemType: "empty"
            }, {
                itemType: "empty"
            }, {
                itemType: "button",
                alignment: "center",
                buttonOptions: {
                    text: "SİPARİŞ OLUŞTUR",
                    type: "default",
                    icon: "link",
                    width: "100%",
                    onClick: function (e) {
                        var result = DevExpress.ui.dialog.confirm("Süreç Oluşturulup Firma Bilgilendirilecektir. Onaylıyor musunuz ?", "Süreç Oluşturma");
                        result.done(function (dialogResult) {
                            if (dialogResult) {
                                var firmaBilgi = $("#formContainer").dxForm("instance").getEditor("firmaBilgi").option("value");
                                var terminTarihi = $("#formContainer").dxForm("instance").getEditor("terminTarihi").option("text");
                                var firmaBilgi = {
                                    FIRMA_ID: firmaBilgi,
                                    TERMIN_TARIHI: terminTarihi
                                }
                                if (firmaBilgi.FIRMA_ID > 0) {

                                    var formData = {
                                        header: @Json.Serialize(Model.Item1),
                                        plan: others,
                                        formHeader: firmaBilgi
                                    }

                                    loadPanel.show();
                                    $.ajax({
                                        type: "POST",
                                        url: '@Url.Action("FasonSiparisOlustur", "UretimTakip")',
                                        data: formData,
                                        async: true,
                                        dataType: "json",
                                        //contentType: 'application/json',
                                        timeout: 180000,
                                        success: function (income, status, xmlRequest) {
                                            $("#popup").dxPopup("hide");
                                            loadPanel.hide();
                                        }, error: function (xhr, status, error) {

                                            DevExpress.ui.dialog.custom({ messageHtml: "HATA : " + xhr.status + ': ' + xhr.statusText, title: "HATA", buttons: [{ text: "TAMAM", }] }).show();
                                            $("#popup").dxPopup("hide");
                                            loadPanel.hide();
                                        }
                                    }).always(function () {
                                        loadPanel.hide();
                                    });
                                } else {

                                    DevExpress.ui.dialog.custom({ messageHtml: "Lütfen firma bilgisi seçiniz", title: "HATA", buttons: [{ text: "TAMAM", }] }).show();
                                }

                            }
                        });
                    }
                }
            }]
        });

    });
        var tasks = [];
        var others =  @Html.Raw(Json.Serialize(Model.Item2));
        var listPlanned = $("#plannedList").dxList({
            items: tasks, selectionMode: "none",
            repaintChangesOnly: true, focusStateEnabled: false,
            keyExpr: "ID",
            itemTemplate: function (data, index) {
                return $("<div>")
                    .append($("<div style='display:inline-block;'>").text(data.NAME))
                    .append($("<div style='display:inline-block;width:50px;float:right' id='idText" + data.ID + "' data-value='" + data.TIME + "' data-sirano='" + data.ID + "' >"));
            },
            itemDragging: {
                allowReordering: true,
                group: "tasks",
                onDragStart: function (e) {
                    e.itemData = tasks[e.fromIndex];
                },
                onAdd: function (e) {
                    tasks.splice(e.toIndex, 0, e.itemData);
                    listPlanned.option("items", tasks);
                },
                onRemove: function (e) {
                    tasks.splice(e.fromIndex, 1);
                    listPlanned.option("items", tasks);
                }
            }, onContentReady: function () {
                for (var i = 0; i < tasks.length; i++) {
                    $("#idText" + tasks[i].ID + "").dxNumberBox({
                        showSpinButtons: true,
                        value: tasks[i].TIME,
                        hint: "Gün",
                        onValueChanged: function (data) {
                            for (var a = 0; a < tasks.length; a++) {
                                if (tasks[a].ID == parseFloat(data.element[0].id.replace("idText", ""))) {
                                    tasks[a].TIME = data.value;
                                }
                            }
                        }
                    });
                }

            }
        }).dxList("instance");

    var listOthers = $("#doingList").dxList({
        items: others, selectionMode: "none",
        repaintChangesOnly: true,
        keyExpr: "ID",
        allowItemDeleting: true,
        itemDeleteMode: "swipe",
        itemTemplate: function (data, index) {
            return $("<div>")
                .append($("<div style='display:inline-block;'>").text(data.NAME))
                .append($("<div style='display:inline-block;width:50px;float:right' id='idSecondText" + data.ID + "' data-value='" + data.TIME + "' data-sirano='" + data.ID + "' >"));
        },
        onItemDeleted: function (e) {
            if (e.itemData) {
                tasks.push(e.itemData);
                listPlanned.option("items", tasks);
                listOthers.option("items", others);
            }
        },
        itemDragging: {
            allowReordering: true,
            group: "tasks",
            onDragStart: function (e) {
                e.itemData = others[e.fromIndex];
            },
            onAdd: function (e) {
                others.splice(e.toIndex, 0, e.itemData);
                listOthers.option("items", others);
            },
            onRemove: function (e) {
                others.splice(e.fromIndex, 1);
                listOthers.option("items", others);
            }
        }, onContentReady: function () {
            for (var i = 0; i < others.length; i++) {
                $("#idSecondText" + others[i].ID + "").dxNumberBox({
                    showSpinButtons: true,
                    hint: "Gün",
                    value: others[i].TIME,
                    onValueChanged: function (data) {
                        for (var a = 0; a < others.length; a++) {
                            if (others[a].ID == parseFloat(data.element[0].id.replace("idSecondText", ""))) {
                                others[a].TIME = data.value;
                            }
                        }
                    }
                });
            }
        }
    }).dxList("instance");

    function inputChange(array, index, val) {
        if (array == 0) {
            tasks[index].TIME = val;
        } else {
            others[index].TIME = val;
        }
    }
    $(document).ready(function () {
    });
</script>
