
@{
    ViewData["Title"] = "UretimIzle";
}
<style>
    #dateBoxProduct{
        margin:auto;
    }
    .productDetailCardHeader {
        font-weight: bold;
        font-size: 24px;
        justify-content: center;
        text-align: center;
        padding-top: 5px;
        padding-bottom: 10px;
    }

    .detailItemEx {
        width: 49%;
        text-align: left;
        display: inline-block;
        font-size: 13px;
    }
    .detailItemValue {
        width: 49%;
        text-align: center;
        display: inline-block;
        font-size: 13px; 
        font-weight:bold;
    }
</style>


<div id="form-container">
    <div class="dx-card wide-card">
        @(Html.DevExtreme().Form<EPM.Production.Monitoring.Dto.Models.FilterModel>()
        .ID("edOnayliListe").ShowValidationSummary(true)
        .Items(items =>
        {
            items.AddGroup().ColCount(8).Items(groupItems =>
            {
                groupItems.AddSimpleFor(m => m.BRAND).Editor(ob => ob.Lookup().SearchEnabled(true).DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Uretim").LoadAction("GetBrandList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID")).IsRequired(false);
                groupItems.AddSimple().Name("SEASON").ColSpan(1).Label(l=>l.Text("SEASON")).Editor(ob => ob.TagBox().ShowSelectionControls(true).SearchEnabled(true).DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Uretim").LoadAction("GetSeasonList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));            
                groupItems.AddSimpleFor(m => m.MODEL).Editor(ob => ob.TextBox().ID("edModel")).IsRequired(false);
                groupItems.AddSimpleFor(m => m.COLOR).Editor(ob => ob.TextBox().ID("edColor")).IsRequired(false);
                groupItems.AddSimpleFor(m => m.ORDER_TYPE).Editor(ob => ob.Lookup().DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Uretim").LoadAction("GetOrderList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID")).IsRequired(false);
                groupItems.AddSimpleFor(m => m.PRODUCT_GROUP).Editor(ob => ob.Lookup().SearchEnabled(true).DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Uretim").LoadAction("GetProductGroupList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID")).IsRequired(false);
                groupItems.AddSimpleFor(m => m.BAND).Editor(ob => ob.Lookup().SearchEnabled(true).DataSource(d => d.Mvc().LoadParams(new { all = true }).Controller("Uretim").LoadAction("GetBandList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID")).IsRequired(false);
                groupItems.AddButton().HorizontalAlignment(HorizontalAlignment.Left).VerticalAlignment(VerticalAlignment.Center)
                  .ButtonOptions(b => b.Text("FİLTRELE")
                      .Type(ButtonType.Default)
                      .Icon("fas fa-sign-in-alt")
                      .Width("100%")
                      .OnClick("UretimIzleFilter")
                      .UseSubmitBehavior(true)
              );

            });



        })
        .FormData(Model).ShowValidationSummary(false)
    )


        <div id="popupDetay"></div>
    </div>
     
    <div style="width: 100%; height: calc(100vh - 145px); ">
        <div id="weekDetailCard" style="width:175px;height:100%;display:inline-block;margin:0 2px">
            <div class="dx-card wide-card" id="marketDetail" style="max-height: 50%; min-height: 50%;margin:1px 0; "></div>
            <div class="dx-card wide-card" id="productGroupDetail" style="max-height: 50%; min-height: 50%;margin:1px 0; "></div>
        </div>

        <div id="productDetailCard" style="width: 225px; height: 100%; display: inline-block;">
            <div class="dx-card wide-card" id="weekDetail" style="max-height: 50%; min-height: 50%; margin: 1px 0; "></div>
            <div class="dx-card wide-card" id="productDetail" style="max-height: 50%; min-height: 50%; margin: 1px 0; "></div>
        </div>
        
        <div style="width: calc(100% - 415px); overflow-y:auto;overflow-x:hidden; height: 100%; display: inline-block; ">
            
            <div class="dx-card wide-card" id="productPlan" style="width: 49.4%; height: 200px; display: inline-block; margin: 0 1px">

            </div>
            <div class="dx-card wide-card" id="productBar" style="width: 49.4%; height: 200px; display: inline-block; margin: 0 1px">

            </div>
            <div id="productDetailPivot" style="width: 100%; height: 650px; display: inline-block; padding: 4px 2px;margin: 0 1px ">
                @(Html.DevExtreme().PivotGrid<EPM.Production.Monitoring.Dto.Models.ProductionDetailPivotModel>().ID("edProductDetailPivot")
                .ShowBorders(false)
                .ShowBorders(true)
                .Scrolling(ob=>ob.Mode(PivotGridScrollingMode.Virtual))
                .Height(650)
                .AllowSortingBySummary(true)
                    .AllowFiltering(true)
                    .ShowBorders(true)
                    .ShowColumnGrandTotals(false)
                    .ShowRowGrandTotals(true)
                    .ShowRowTotals(false)
                    .ShowColumnTotals(false)
                    .AllowExpandAll(true)
                    .FieldPanel(p => p.Visible(true))
                    .FieldChooser(c => c.Enabled(true).Height(400))
                .Export(ob => ob.Enabled(true))
                )
            </div>
            <div class="dx-card wide-card" id="releasedSeasonal" style="width: 100%; height: 250px; display: inline-block; margin: 0 1px">

            </div>
            <div class="dx-card wide-card" id="releasedTasnif" style="width: 49.4%; height: 250px; display: inline-block; margin: 0 1px">

            </div>
            <div class="dx-card wide-card" id="releasedBant" style="width: 49.4%; height: 250px; display: inline-block; margin: 0 1px ">

            </div>
            <div class="dx-card wide-card" id="releasedKalite" style="width: 49.4%; height: 250px; display: inline-block; margin: 0 1px ">

            </div>
            <div class="dx-card wide-card" id="releasedKaliteG" style="width: 49.4%; height: 250px; display: inline-block; margin: 0 1px ">

            </div>
            
        
            <div id="releasedProductList" style="width: 100%; height: 450px; display: inline-block; padding: 4px 2px ">
                @(Html.DevExtreme().DataGrid<EPM.Production.Monitoring.Dto.Models.ProductionModel>().ID("edUretimTakipGrid")
                .ShowBorders(false)
                .FilterRow(f => f.Visible(true))
                .FocusedRowEnabled(true)
                .FocusedRowIndex(0)
                .Selection(s => s.Mode(SelectionMode.Single))
                .ColumnAutoWidth(true)
                .ShowBorders(true)
                .HeaderFilter(a=>a.Visible(true))
                .Paging(o => o.PageSize(50))
                .Height(450)
                .ShowColumnLines(true)
                .ShowColumnHeaders(true)
                .ColumnMinWidth(60)
                .AllowColumnResizing(true)
                .Columns(columns => {
                    columns.Add().Width(50).Type(GridCommandColumnType.Buttons).Buttons(btn => btn.Add().Icon("fa fa-search").OnClick("DetailSearch"));
                    columns.AddFor(m => m.ID).Width(100).AllowEditing(false);
                    columns.AddFor(m => m.APPROVAL_STATUS).Visible(false).Width(110).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetApprovalStatusList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.BRAND).Visible(false).Width(110).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetBrandList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.SEASON).Lookup(look => look.DataSource(d => d.Mvc().Controller("Uretim").LoadAction("GetSeasonList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.MODEL);
                    columns.AddFor(m => m.COLOR);
                    columns.AddFor(m => m.COMPANY_NAME);
                    columns.AddFor(m => m.COLLECTION_TYPE).Visible(false).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetCollectionTypes").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.ROYALTY).Visible(false);
                    columns.AddFor(m => m.TEMA).Visible(false);
                    columns.AddFor(m => m.ANA_TEMA).Visible(false);
                    columns.AddFor(m => m.PRODUCT_GROUP).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetProductGroupList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.FABRIC_TYPE).Visible(false).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetFabricList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.PRODUCTION_TYPE).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetProductionTypes").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.ORDER_TYPE).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetOrderList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.RECIPE).Width(140).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetRecipeList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.BAND_ID).Visible(false).Lookup(look => look.DataSource(d => d.Mvc().LoadParams(new { all = false }).Controller("Uretim").LoadAction("GetBandList").Key("ID")).DisplayExpr("ADI").ValueExpr("ID"));
                    columns.AddFor(m => m.DEADLINE).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy");
                    columns.AddFor(m => m.DEADLINE_2).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy");
                    columns.AddFor(m => m.DEADLINE_3).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy");
                    columns.AddFor(m => m.DEADLINE_4).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy");
                    columns.AddFor(m => m.SHIPMENT_DATE).DataType(GridColumnDataType.Date).Format("dd.MM.yyyy");
                    columns.AddFor(m => m.QUANTITY);

                    columns.AddFor(m => m.PROCESS_INFO).Caption("SÜREÇ DURUMU");

                })
                .Summary(sm =>
                {
                    sm.TotalItems(t =>
                    {
                        t.AddFor(ob => ob.MODEL).SummaryType(SummaryType.Count).CustomizeText(@<text>function(data){return data.value}</text>);
                            t.AddFor(ob => ob.QUANTITY).SummaryType(SummaryType.Sum).CustomizeText(@<text>function(data){return data.value}</text>);

                    });

                })
                .OnCellPrepared("edUretimTakipGridCellPrepared")
                )
            </div>

        </div>
    </div>



</div>


<script>
    function DetailSearch(e) {
        var width = "";
        var height = "";
        if (e.row.data.PRODUCTION_TYPE == 1) {
            width = "calc(100% - 20px)";
            height = "calc(100% - 10px)";
            title = "SATIN ALMA DETAYI";
        }
        else {
            width = "calc(100% / 2)";
            height = "calc(100% - 250px)";
            title = "FASON SİPARİŞ SÜREÇ DURUMLARI";
        }
        var header_id = e.row.data.ID;
        tempHeaderId = header_id;
        var popupOptions = {
            contentTemplate: function () {
                var data = {
                    HEADER_ID: tempHeaderId,
                    RECIPE: e.row.data.RECIPE
                };
                return  $.ajax({
                    type: "GET",
                    url: '@Url.Action("_PartialUretimTakipDetay", "UretimTakip")',
                    data: data,
                    async: false,
                    success: function (status) {
                    }
                }).responseText;
            },
            width: function () { return width; },
            height: function () { return height; },
            showTitle: true,
            title: title,
            dragEnabled: true,
            closeOnOutsideClick: true
        };

        $("#popupDetay").dxPopup(popupOptions).dxPopup("instance").show();
    }
     function gridSatinAlmaFocusedRowChanged(e) {
        setTimeout(function () {
            $("#edProcessInformations").load('@Url.Action("_PartialProcessInformations", "UretimTakip")', {
                PO_HEADER_ID: e.row.data.PO_HEADER_ID,
                HEADER_ID: e.row.data.HEADER_ID,
                DETAIL_ID: e.row.data.DETAIL_TAKIP_NO
            });


            $("#edOrmeTab").load('@Url.Action("_PartialEgemenOrmeList", "UretimTakip")', {
                TAKIP_NO: e.row.data.TAKIP_NO,
                DETAIL_TAKIP_NO: e.row.data.DETAIL_TAKIP_NO
            });

            $("#edKumasDepoTab").load('@Url.Action("_PartialKumasDepoList", "UretimTakip")', {
                ITEM_ID: e.row.data.ITEM_ID,
                PO_HEADER_ID: e.row.data.PO_HEADER_ID
            });
            $("#edKesimTab").load('@Url.Action("_PartialKesimFoyuList", "UretimTakip")', {
                ITEM_ID: e.row.data.ITEM_ID,
                PO_HEADER_ID: e.row.data.PO_HEADER_ID,
                RENK_DETAY: e.row.data.RENKDETAY,
            });
            $("#edBantTab").load('@Url.Action("_PartialBantList", "UretimTakip")', {
                ITEM_ID: e.row.data.ITEM_ID,
                PO_HEADER_ID: e.row.data.PO_HEADER_ID,
                RENK_DETAY: e.row.data.RENKDETAY,
            });
            $("#edKaliteTab").load('@Url.Action("_PartialKaliteList", "UretimTakip")', {
                ITEM_ID: e.row.data.ITEM_ID,
                PO_HEADER_ID: e.row.data.PO_HEADER_ID,
                RENK_DETAY: e.row.data.RENKDETAY,
            });
        }, 200);


    }
    function edUretimTakipGridCellPrepared() {

    }
    var weekDetail, productDetail;
    function ClearChart() {
        try { $("#productBar").dxChart("instance").option("dataSource", null); } catch (e) { }
        try { $("#releasedTasnif").dxChart("instance").option("dataSource", null); } catch (e) { }
        try { $("#releasedBant").dxChart("instance").option("dataSource", null); } catch (e) { }
        try { $("#releasedKalite").dxChart("instance").option("dataSource", null); } catch (e) { }
        try { $("#releasedKaliteG").dxChart("instance").option("dataSource", null); } catch (e) { }
        try { $("#productPlan").dxDataGrid("instance").option("dataSource", null); } catch (e) { }
        try { $("#edUretimTakipGrid").dxDataGrid("instance").option("dataSource", null); } catch (e) { }
        try { $("#releasedSeasonal").dxChart("instance").option("dataSource", null); } catch (e) { } 
        try { $("#edProductDetailPivot").dxPivotGrid("instance").option("dataSource", null); } catch (e) { }

        
    }
    function ClearGrid() {
        $("#productBar").dxChart("instance").option("dataSource", null);
    }
    function ClearBottom() {
        $("#hfKesim").html(0);
        $("#hfTasnif").html(0);
        $("#hfBant").html(0);
        $("#hfKalite").html(0);
    }
    function ClearRealTime() {
        $("#trKesim").html(0);
        $("#trTasnif").html(0);
        $("#trBant").html(0);
        $("#trKalite").html(0);
    }
    function GetMarketList() {
         $.ajax({
            type: "POST",
            url: '@Url.Action("GetMarketList", "UretimIzle")',
            data: "",
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
             success: function (income, status, xmlRequest) {
                 marketModel = income;
                marketDetail = $("#marketDetail").dxList({
                    dataSource: new DevExpress.data.DataSource({
                        store: new DevExpress.data.ArrayStore({
                            key: "ID",
                            data: income
                        }),
                        paginate: false
                    }),
                    height: "100%",
                    selectedItemKeys: $(income).map(function () {
                        return this.ID;
                    }).get(),
                    itemTemplate: function (data) {
                        var html = "<div> <span style='font-weight:bold;'>" + data.EGEMEN_ADI + "</span></div>";
                        return html;
                    },
                    showSelectionControls: true,
                    selectionMode: "all",
                    pageLoadMode: "scrollBottom",
                    onSelectionChanged: function (data) {
                        marketModel = marketDetail.dxList("instance").option("selectedItems");
                    }
                });

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }
    function GetProductGroup() {
         $.ajax({
            type: "POST",
            url: '@Url.Action("GetProductGroup", "UretimIzle")',
            data: "",
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                productGroupModel = income;
                productGroupDetail = $("#productGroupDetail").dxList({
                    dataSource: new DevExpress.data.DataSource({
                        store: new DevExpress.data.ArrayStore({
                            key: "ID",
                            data: income
                        }),
                        paginate: false
                    }), selectedItemKeys: $(income).map(function () {
                        return this.ID;
                    }).get(),
                    height: "100%",
                    itemTemplate: function (data) {
                        var html = "<div> <span style='font-weight:bold;'>" + data.ADI + "</span></div>";
                        return html;
                    },
                    showSelectionControls: true,
                    selectionMode: "all",
                    pageLoadMode: "scrollBottom",
                    onSelectionChanged: function (data) {
                        productGroupModel = productGroupDetail.dxList("instance").option("selectedItems");
                    }
                });

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }
    $(function () {
        GetMarketList();
        GetProductGroup();
    });

    function UretimIzleFilter() {
        ClearChart();
        ClearBottom();
        try { $("#weekDetail").dxList("instance").option("dataSource", null); } catch (e) { }
        try { $("#productDetail").dxList("instance").option("dataSource", null); } catch (e) { }
        var data = {
            BRAND: jQuery("[name=BRAND]").val(),
            SEASON: $("#edOnayliListe").dxForm("instance").getEditor("SEASON")._selectedItems,
            BAND: jQuery("[name=BAND]").val(),
            MODEL: jQuery("[name=MODEL]").val(),
            COLOR: jQuery("[name=COLOR]").val(),
            ORDER_TYPE: jQuery("[name=ORDER_TYPE]").val(),
            PRODUCT_GROUP: jQuery("[name=PRODUCT_GROUP]").val()
        };
        $.ajax({
            type: "POST",
            url: '@Url.Action("UretimIzleFilter", "UretimIzle")',
            data: data,
            contentType: 'application/x-www-form-urlencoded',
            timeout: 180000,
            success: function (income, status, xmlRequest) {

                weekDetail= $("#weekDetail").dxList({
                    dataSource: new DevExpress.data.DataSource({
                        store: new DevExpress.data.ArrayStore({
                            key: "ID",
                            data: income
                        }),
                        paginate: false
                    }),
                    height: "100%",
                    itemTemplate: function (data) {
                        var html = "<div style='text-align:center;padding-right:15px;'> <span style='font-weight:bold;font-size:11px'>" + data.WEEK + ". Hafta </span><br> <span style='font-weight:bold;color:indianred'>  (" + moment(data.START_DATE).format("DD.MM.YYYY") + " - " + moment(data.END_DATE).format("DD.MM.YYYY") + ")</span></div>";
                        return html;
                    },
                    showSelectionControls: true,
                    selectionMode: "all",
                    pageLoadMode: "scrollBottom",
                    onSelectionChanged: function (data) {
                        haftaModel = weekDetail.dxList("instance").option("selectedItems");
                        try { $("#productDetail").dxList("instance").option("dataSource", null); } catch (e) { }
                        ClearChart();
                        GetProductDetail();
                    }
                });

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }

    var haftaModel = null;
    var productModel = null;
    var marketModel = null;
    var productGroupModel = null;
    function GetProductDetail() {
        ClearChart();
        ClearBottom();

        if (haftaModel == null || haftaModel.length == 0)
            return;
        data = {
            haftaModel: haftaModel,
            marketModel: marketModel,
            productGroupModel: productGroupModel,
            filterModel: {
                BRAND: jQuery("[name=BRAND]").val(),
                SEASON: $("#edOnayliListe").dxForm("instance").getEditor("SEASON")._selectedItems,
                BAND: jQuery("[name=BAND]").val(),
                MODEL: jQuery("[name=MODEL]").val(),
                COLOR: jQuery("[name=COLOR]").val(),
                ORDER_TYPE: jQuery("[name=ORDER_TYPE]").val(),
                PRODUCT_GROUP: jQuery("[name=PRODUCT_GROUP]").val()
            }
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetProductList", "UretimIzle")',
            data: JSON.stringify(data),
            contentType: 'application/json',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                productDetail = $("#productDetail").dxList({
                    dataSource: new DevExpress.data.DataSource({
                        store: new DevExpress.data.ArrayStore({
                            key: "ID",
                            data: income
                        }),
                        paginate: false
                    }),
                    height: "100%",
                    //searchEnabled: true,
                    searchExpr: "MODEL",
                    itemTemplate: function (data) {
                        var html = "<div> <span style='font-weight:bold;'>" + data.MODEL + "</span>.<span style='font-weight:bold'>" + data.COLOR + "</span></div>";
                        return html;
                    },
                    showSelectionControls: true,
                    //pageLoadMode: "scrollBottom",
                    selectionMode: "all",
                    onSelectionChanged: function (data) {
                        productModel = productDetail.dxList("instance").option("selectedItems");
                        GetProductionDetails();
                    }
                });

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }


    function GetProductionDetails() {
        ClearChart();
        ClearBottom();
        if (haftaModel == null || haftaModel.length == 0)
            return;
        if (productModel == null || productModel.length == 0)
            return;

        data = {
            haftaModel: haftaModel,
            productModel: productModel,
            marketModel: marketModel,
            productGroupModel: productGroupModel,
            filterModel: {
                BRAND: jQuery("[name=BRAND]").val(),
                SEASON: $("#edOnayliListe").dxForm("instance").getEditor("SEASON")._selectedItems,
                BAND: jQuery("[name=BAND]").val(),
                MODEL: jQuery("[name=MODEL]").val(),
                COLOR: jQuery("[name=COLOR]").val(),
                ORDER_TYPE: jQuery("[name=ORDER_TYPE]").val(),
                PRODUCT_GROUP: jQuery("[name=PRODUCT_GROUP]").val()
            }
        }
        $.ajax({
            type: "POST",
            url: '@Url.Action("GetProductionDetails", "UretimIzle")',
            data: JSON.stringify( data),
            contentType: 'application/json',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                console.log(income);
                var totalPLAN = 0;
                var totalORDER = 0;
                for (var i = 0; i < income.Item1.length; i++) {
                    totalORDER += income.Item1[i].ORDER_QUANTITY;
                    totalPLAN += income.Item1[i].QUANTITY;
                }
                var bar = [{
                    arg: "SİPARİŞ",
                    val: totalORDER
                }, {
                    arg: "HAFTALIK PLAN",
                    val: totalPLAN
                }, {
                    arg: "KESİM",
                    val: income.Item2.KESIM
                }, {
                    arg: "TASNİF",
                    val: income.Item2.TASNIF
                }, {
                    arg: "BANT",
                    val: income.Item2.BANT
                }, {
                    arg: "KALİTE",
                    val: income.Item2.KALITE
                    }];
                var barKesim = [];
                var barTasnif = [];
                var barBant = [];
                var barKalite = [];
                var barKaliteG = [];
                var kaliteGSum = 0;
                for (var i = 0; i < income.Item3.length; i++) {
                    var marketReleased = income.Item3[i];
                    if (marketReleased.TYPE == "KESİM")
                        barKesim.push({ arg: marketReleased.PAZAR_ADI, val: marketReleased.MIKTAR });
                    if (marketReleased.TYPE == "TASNİF")
                        barTasnif.push({ arg: marketReleased.PAZAR_ADI, val: marketReleased.MIKTAR });
                    if (marketReleased.TYPE == "BANT")
                        barBant.push({ arg: marketReleased.PAZAR_ADI, val: marketReleased.MIKTAR });
                    if (marketReleased.TYPE == "KALİTE")
                        barKalite.push({ arg: marketReleased.PAZAR_ADI, val: marketReleased.MIKTAR });
                    if (marketReleased.TYPE == "KALİTEG") {
                        barKaliteG.push({ arg: marketReleased.PAZAR_ADI, val: marketReleased.MIKTAR });
                        kaliteGSum += marketReleased.MIKTAR;
                    }
                }
                bar.push({ arg: "KALİTE GERÇEKLEŞEN", val: kaliteGSum });


                try { $("#edUretimTakipGrid").dxDataGrid("instance").option("dataSource", income.Item4); } catch (e) { }
                try { $('#edProductDetailPivot').dxPivotGrid('instance').option('dataSource', {  
                    fields: [
                        {
                        caption: 'SEZON ADI', 
                        dataField: 'SEASON_NAME',
                        area: 'column', 
                        expanded:true
                      },{
                        caption: 'PAZAR ADI', 
                        dataField: 'MARKET_NAME',
                        area: 'column', 
                        expanded:true
                      },{
                        caption: 'SİPARİŞ TİPİ', 
                        dataField: 'ORDER_NAME',
                        area: 'column', 
                        expanded:true
                      },{
                        caption: 'MODEL', 
                        dataField: 'MODEL',
                        area: 'row', 
                        expanded:true
                      },{
                        caption: 'RENK', 
                        dataField: 'COLOR',
                        area: 'row', 
                        expanded:true
                      },{
                        caption: 'SİPARİŞ TOPLAM', 
                        width:120,
                        dataField: 'ORDER_QUANTITY',
                        area: 'data', summaryType: 'sum',
                        expanded:true
                      },{
                        caption: 'PLAN TOPLAM', 
                        width:120,
                        dataField: 'QUANTITY',
                        area: 'data', summaryType: 'sum',
                        expanded:true
                      }
                      //,{
                      //  caption: 'KESİM', 
                      //  dataField: 'KESIM',
                      //  area: 'data', summaryType: 'sum',
                      //  expanded:true
                      //},{
                      //  caption: 'TASNİF', 
                      //  dataField: 'TASNIF',
                      //  area: 'data', summaryType: 'sum',
                      //  expanded:true
                      //},{
                      //  caption: 'BANT', 
                      //  dataField: 'BANT',
                      //  area: 'data', summaryType: 'sum',
                      //  expanded:true
                      //},{
                      //  caption: 'KALİTE', 
                      //  dataField: 'KALITE',
                      //  area: 'data', summaryType: 'sum',
                      //  expanded:true
                      //}
                      ,{
                        caption: 'KALİTE GERÇEKLEŞEN', 
                        dataField: 'KALITE_GERCEKLESEN',
                        width:120,
                        area: 'data', summaryType: 'sum',
                        expanded:true
                      }
                    ],  
                    store:  income.Item6 
                }); } catch (e) {console.log(e)}

                 

                var barSeasonal = [];
                for (var i = 0; i < income.Item5.length; i++) {
                    var marketReleased = income.Item5[i];
                    barSeasonal.push({ SEASON: marketReleased.SEASON_NAME, QUANTITY: marketReleased.QUANTITY, ORDER_QUANTITY: marketReleased.ORDER_QUANTITY, KESIM: marketReleased.KESIM, TASNIF: marketReleased.TASNIF, BANT: marketReleased.BANT, KALITE: marketReleased.KALITE, KALITE_GERCEKLESEN: marketReleased.KALITE_GERCEKLESEN })
                }
                $("#releasedSeasonal").dxChart({
                    commonSeriesSettings: {
                        argumentField: 'SEASON', type: 'bar',
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    },
                    dataSource: barSeasonal,
                    palette: "Material",
                    paletteExtensionMode: "Extrapolate",
                    legend: {
                        visible: false
                    },
                    series: [
                        { valueField: 'QUANTITY', name: 'PLAN TOPLAM' },
                        { valueField: 'ORDER_QUANTITY', name: 'SİPARİŞ TOPLAM' },
                        { valueField: 'KESIM', name: 'KESİM' },
                        { valueField: 'TASNIF', name: 'TASNİF' },
                        { valueField: 'BANT', name: 'BANT' },
                        { valueField: 'KALITE', name: 'KALİTE' },
                        { valueField: 'KALITE_GERCEKLESEN', name: 'KALİTE GERÇEKLEŞEN' },
                    ], tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }

                    },
                    legend: {
                        verticalAlignment: 'bottom',
                        horizontalAlignment: 'center',
                    },
                    title: {
                        text: "SEZONSAL",
                        font: {
                            color: "black",
                            size: 14
                        }
                    },
                });
                $("#releasedTasnif").dxChart({
                    commonSeriesSettings: {
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    }, onPointClick: function (e) {
                        GetProductionDetailsList("TASNİF", e.target.data.arg);
                    },
                    dataSource: barTasnif,
                    palette: "Material",
                    paletteExtensionMode: "Extrapolate",
                    legend: {
                        visible: false
                    },
                    series: {
                        type: "bar"
                    }, tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }

                    },
                    title: {
                        text: "Tasnif",
                        font: {
                            color: "black",
                            size: 14
                        }
                    },
                });
                $("#releasedBant").dxChart({
                    commonSeriesSettings: {
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    }, onPointClick: function (e) {
                        GetProductionDetailsList("BANT", e.target.data.arg);
                    },
                    dataSource: barBant,
                    palette: "Office",
                    paletteExtensionMode: "Extrapolate",
                    legend: {
                        visible: false
                    },
                    series: {
                        type: "bar"
                    }, tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }
                    },
                    title: {
                        text: "Bant",
                        font: {
                            color: "black",
                            size: 14
                        }
                    },
                });
                $("#releasedKalite").dxChart({
                    commonSeriesSettings: {
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    }, onPointClick: function (e) {
                        GetProductionDetailsList("KALİTE", e.target.data.arg);
                    },
                    dataSource: barKalite,
                    palette: "Pastel",
                    paletteExtensionMode: "Extrapolate",
                    legend: {
                        visible: false
                    },
                    series: {
                        type: "bar"
                    }, tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }
                    },
                    title: {
                        text: "Kalite",
                        font: {
                            color: "black",
                            size: 14
                        }
                    },
                });
                $("#releasedKaliteG").dxChart({
                    commonSeriesSettings: {
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    }, onPointClick: function (e) {
                        GetProductionDetailsList("KALİTE GERÇEKLEŞEN", e.target.data.arg);
                    },
                    dataSource: barKaliteG,
                    palette: "Bright",
                    paletteExtensionMode: "Extrapolate",
                    legend: {
                        visible: false
                    },
                    series: {
                        type: "bar"
                    }, tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }
                    },
                    title: {
                        text: "Kalite Gerçekleşen",
                        font: {
                            color: "black",
                            size: 14
                        }
                    },
                });
                $("#productBar").dxChart({
                    title: {
                        text: "Üretim Durumu",
                        font: {
                            color: "black",
                            size:14
                        }
                    }, onPointClick: function (e) {
                        if (e.target.data.arg != "HAFTALIK PLAN" || e.target.data.arg != "SİPARİŞ")
                        GetProductionDetailsList(e.target.data.arg, "");
                    },
                    commonSeriesSettings: {
                        label: {
                            visible: true,
                            format: {
                                type: "fixedPoint",
                                precision: 0
                            }
                        }
                    },
                    dataSource: bar,
                    palette: "soft",
                    legend: {
                        visible: false
                    },
                    series: {
                        type: "bar"
                    }, tooltip: {
                        enabled: true
                    },
                    argumentAxis: {
                        tickInterval: 5,
                        label: {
                            format: {
                                type: "decimal"
                            }, font: {
                                color: "black",
                                size: 8
                            }
                        }
                    }
                });
                $("#hfKesim").html(income.Item2.KESIM);
                $("#hfTasnif").html(income.Item2.TASNIF);
                $("#hfBant").html(income.Item2.BANT);
                $("#hfKalite").html(income.Item2.KALITE);
                $("#productPlan").dxDataGrid({
                    dataSource: income.Item1,
                    keyExpr: 'ID',
                    selection: {
                        mode: "single"
                    },
                    hoverStateEnabled: true,
                    showBorders: true,
                    columns: [
                        {
                            dataField: 'MARKET_NAME',
                            caption: 'PAZAR ADI',
                        },
                        {
                            dataField: 'QUANTITY',
                            caption: 'PLAN ADEDİ',
                        },
                        {
                            dataField: 'ORDER_QUANTITY',
                            caption: 'SİPARİŞ ADEDİ',
                        }
                    ],
                    showBorders: true,
                    summary: {
                        totalItems: [{
                            column: "QUANTITY",
                            summaryType: "sum"
                        }, {
                            column: "ORDER_QUANTITY",
                                summaryType: "sum"
                            }]
                    }
                });

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
        //"MARKET_NAME", "QUANTITY", "ORDER_QUANTITY"
    }
    function GetProductionDetailsList(OPERATION, MARKET) {
        if(OPERATION=="SİPARİŞ" || OPERATION=="HAFTALIK PLAN")
        return;
        console.log(OPERATION);
        console.log(MARKET);
        data = {
            haftaModel: haftaModel,
            productModel: productModel,
            marketModel: marketModel,
            productGroupModel: productGroupModel,
            filterModel: {
                BRAND: jQuery("[name=BRAND]").val(),
                SEASON: $("#edOnayliListe").dxForm("instance").getEditor("SEASON")._selectedItems,
                BAND: jQuery("[name=BAND]").val(),
                MODEL: jQuery("[name=MODEL]").val(),
                COLOR: jQuery("[name=COLOR]").val(),
                ORDER_TYPE: jQuery("[name=ORDER_TYPE]").val(),
                PRODUCT_GROUP: jQuery("[name=PRODUCT_GROUP]").val()
            },
            operation: {
                OPERATION: OPERATION,
                MARKET: MARKET
            }
        }

        $.ajax({
            type: "POST",
            url: '@Url.Action("GetProductionDetailsList", "UretimIzle")',
            data: JSON.stringify(data),
            contentType: 'application/json',
            timeout: 180000,
            success: function (income, status, xmlRequest) {
                var tit = OPERATION + " -- " + MARKET;

                var popupOptions = {
                    contentTemplate: function () {
                      
                        return $.ajax({
                            type: "GET",
                            url: '@Url.Action("_GetProductionDetailsListGrid", "UretimIzle")',
                            data: "",
                            async: false,
                            success: function (status) {
                            }
                        }).responseText;
                    },
                    width: function () { return "1200px"; },
                    height: function () { return "600px"; },
                    showTitle: true,
                    title: tit,
                    dragEnabled: true,
                    closeOnOutsideClick: true,
                    onContentReady: function () {
                        try { $("#edProductionDetailModelGrid").dxDataGrid("instance").option("dataSource", income); } catch (e) { }
                    }

                };

                $("#popupDetay").dxPopup(popupOptions).dxPopup("instance").show();

            }, beforeSend: function () {
                getLoadPanelInstance().show();
            }


        }).always(function () {
            getLoadPanelInstance().hide();
        });
    }

</script>
